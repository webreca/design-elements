{
	// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"header": {
		"prefix": "header",
		"body": [
			"const headers = {",
			"\tAccept: \"application/json, text/plain, */*\",",
			"\t\"Content-Type\": \"application/json\",",
			"\tAuthorization: `Bearer ` + localStorage.getItem(\"admin-token\"),",
			"};",
		],
	},

	"useState": {
		"prefix": "useState",
		"body": [
			"const navigate\t\t\t  = useNavigate();",
			"const [form, setForm] \t\t= useState({ name: \"\", salary: \"\", phone: \"\", address: \"\", email: \"\", password: \"\", status: \"\" });",
			"const [button, setButton] = useState(false);",
			"const [errors, setErrors] = useState([]);",
		],
	},

	"handleChange": {
		"prefix": "handleChange",
		"body": [
			"const handleChange = (e) => {",
			"\tconst { name, value } = e.target",
			"\tsetForm({ ...form, [name]: value })",
			"}",
		],
	},

	"onChange": {
		"prefix": "onChange",
		"body": [
			"onChange={(e) => handleChange(e)}",
		],
	},

	"Input Type Name": {
		"prefix": "Input Type Name",
		"body": [
			"<div className=\"form-group col-lg-12 mb-2\">",
			"\t<label htmlFor=\"name\" className=\"col-form-label\">Name</label>",
			"\t<input type=\"text\" name=\"name\" value={form.name} onChange={(e) => handleChange(e)} className=\"form-control\" placeholder=\"Enter your Name\"/>",
			"\t{errors.name ? (<div className=\"invalid-feedback\">{errors.name}</div>) : (\"\")}",
			"</div>"
		],
	},

	"Input Type Number": {
		"prefix": "Input Type Number",
		"body": [
			"<div className=\"form-group col-lg-12 mb-2\">",
			"\t<label htmlFor=\"salary\" className=\"col-form-label\">Salary</label>",
			"\t<input type=\"number\" name=\"salary\" value={form.salary} onChange={(e) => handleChange(e)} className=\"form-control\" placeholder=\"Enter your Salary\"/>",
			"\t{errors.salary ? (<div className=\"invalid-feedback\">{errors.salary}</div>) : (\"\")}",
			"</div>"
		],
	},

}
